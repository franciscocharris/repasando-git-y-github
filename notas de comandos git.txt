********ver historial y cosas asi***********
-ver todos comandos hechos
*history
- aplicar el mismo comando del history,
* ! numero_de_la_izquierda_del_comando

-ver el historial de commits de un archivo
*git log nombre_del_archivo

-ver archivo en un commit anterior soo para ver
* git checkout caff5af277e0bf2ab238bd6ff9a3f968cda7ceae nombre_del_archivo

**********git comands**********
-regresar a los cambios de un commit anterior
*git reset caff5af277e0bf2ab238bd6ff9a3f968cda7ceae --hard 

 ó

*git reset --HARD hash_corto_del_commit

-hacer un merge
git merge nombre_branch_a_combinar

**********añadir usuario por cada computadora**********


**********trabajando con github**********
-trerse algo de github con protocolo  --https--
git remote add origin direccion_protocolo_http

-traerse algo de github con protocolo  --ssh--
git remote set-url origin url_repositorio

-pull cuando hay historias distintas, desde el remoto con el de mi locales
git pull origin master --allow-unrelated-histories


**********colaborando en un proyecto open source de github**********
-claro ya tengo my repositorio que es un fork del proyecto original,pero para poder tenerlo actualizado cada que ellos lo actualizan ,tengo que añadir otra fuente de infomacion
git remote add upstream link_repositorio_original

**********branch**********
-crear branch
*git branch nombre_rama

-cambiar de ramas
*git checkout nombre_branch

-mostrar ramas 
*git branch

-eliminar ramas
*git branch -D nombre_rama

-rebase : 

-primero se hace unn rebase en la rama aparte del master
*git rebase master

-luego se hace un rebase desde master a la rama que se hizo
git rebase nombre_rama_aparte

**********branch en  github****************
-traerse los cambios de una rama remotas
*estado en la rama de la que vas a extraer : git remote add nombre_branch

-mostar todas las branch locales y remotas
*git show-ref  ó *git branch -a

-ver solo las remotas
*git branch -r 

-subir las branch en local a remoto
*git push origin nombre_rama

**********alias**********
*alias  Nombre_alias="comando largo en git" - crear alias
*git tag - listar alia

-hacer alias globales
*git config --global alias.nombre_alias  "comando_largo"

**********tags**********

*git tag -a nombre_del_tag -m "el mensaje" serie corta del commit (eje: 8dc1daa)
*git show-ref --tag  : muestra los tags locales
*git push origin --tags publicar tags a github

*git tag -d nombre_del_tag : eliminar un tag 

*git push origin :refs/tags/nombre del tag  : eliminar el tag en github


***********los stash**************
-algo asi como un trabajito adelantado pero quiero ver lo que habia antes
se hace
*git stash

-reviso lo que habia en la otra rama , no mas pa ver (cambios entre ramas para revisar)
*git stash pop  y listo , vuelven los cambios que hiciste 

-listar los stash
*git stash list

-ahora para poner ese cambio en otra rama
*git stash branch nombre_rama 

-borrar stash
*git stash drop

**************limpiar archivos del proyecto no deseados********************
-para preparar y saber que va a borrar
*git clean --dry-run

-borrar los archivos
*git clean -f   (ojo los de gitignore no les hace nada)

***********cherry-pick traerse cualquier commit de una rama a la rama master*****************
*git cherry-pick hash_corto_del_commit (eje: 26ba24c)

***********para agregar cambios que se olvidaron añadir al commit****************
si se te olvida hacer un cambio y ya hiciste un commit, se pude remendar con un codigo que agrega esos cambios al ultimo commit hecho
*git commit --amend

*********ver una historia mas completa de todo que git log ***********
*git reflog

********comandos curiosos**********

******git grep *******
-para buscar palabras o algo en tu proyecto y saber la linea exacta donde esta
*git grep -n Palabra_a_buscar o "Palabra_o_codigo_a_buscar"

-para saber la cantidad de veces que se utiliza
*git grep -c Palabra_a_buscar o "Palabra_o_codigo_a_buscar"

-buscar palabras en los commits
*git grep -S "Palabra_a_buscar"

******
-saber cuantos commits hizo cada colaborador y el mensaje del commit
*git shortlog

-para saber solo las personas sin los mensajes
*git shortlog -sn

-tambien para ver los commits ,incluso los borrados
*git shortlog -sn --all

-tambien para ver todos los commits ,sin merges
*git shortlog -sn --all --no-merges

-para ver quienes son los responsables y sus lineas en un archivo especifico
*git blame nombre_archivo

-para verlo mas organizado lo de arriba
*git blame -c nombre_archivo

-para ver la ayuda de todos los comandos ()
*git blame --help

-saber quien hizo tal cosa en cierto pedazo de codigo de un archivo
*git blame estilo.css -L35,53  (desde la linea tal hasta la linea tal)

